{
  "schemaVersion": "2.2",
  "description": "Send commands to Amazon CloudWatch Agent",
  "parameters": {
    "action": {
      "description": "The action CloudWatch Agent should take.",
      "type": "String",
      "default": "configure",
      "allowedValues": [
        "configure",
        "configure (append)",
        "configure (remove)",
        "start",
        "status",
        "status-with-workloads",
        "stop"
      ]
    },
    "mode": {
      "description": "Controls platform-specific default behavior such as whether to include EC2 Metadata in metrics.",
      "type": "String",
      "default": "ec2",
      "allowedValues": [
        "ec2",
        "onPremise",
        "auto"
      ]
    },
    "optionalConfigurationSource": {
      "description": "Only for 'configure' related actions. Use 'ssm' to apply a ssm parameter as config. Use 'default' to apply default config for amazon-cloudwatch-agent. Use 'all' with 'configure (remove)' to clean all configs for amazon-cloudwatch-agent.",
      "type": "String",
      "allowedValues": [
        "ssm",
        "default",
        "all"
      ],
      "default": "ssm"
    },
    "optionalConfigurationLocation": {
      "description": "For configure actions when optionalConfigurationSource is ssm: Single SSM parameter name, or comma-separated list of SSM parameter names to merge multiple configurations.",
      "type": "String",
      "default": "",
      "allowedPattern": "^[a-zA-Z0-9-\"~:_@./^(*)!<>?=+,]*$"
    },
    "optionalRestart": {
      "description": "Only for 'configure' related actions. If 'yes', restarts the agent to use the new configuration. Otherwise the new config will only apply on the next agent restart.",
      "type": "String",
      "default": "yes",
      "allowedValues": [
        "yes",
        "no"
      ]
    }
  },
  "mainSteps": [
    {
      "name": "ControlCloudWatchAgentWindows",
      "action": "aws:runPowerShellScript",
      "precondition": {
        "StringEquals": [
          "platformType",
          "Windows"
        ]
      },
      "inputs": {
        "runCommand": [
          " Set-StrictMode -Version 2.0",
          " $ErrorActionPreference = 'Stop'",
          " $Cmd = \"${Env:ProgramFiles}\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent-ctl.ps1\"",
          " if (!(Test-Path -LiteralPath \"${Cmd}\")) {",
          "     Write-Output 'CloudWatch Agent not installed.  Please install it using the AWS-ConfigureAWSPackage SSM Document.'",
          "     exit 1",
          " }",
          " $Params = @()",
          " $Action = '{{action}}'",
          " # Handle multi-config merge for configure action",
          " $ConfigLocation = '{{optionalConfigurationLocation}}'",
          " if ($Action -eq 'configure' -and '{{optionalConfigurationSource}}' -eq 'ssm' -and $ConfigLocation -match ',') {",
          "     Write-Output \"Merging multiple configurations: $ConfigLocation\"",
          "     $Configs = $ConfigLocation -split ','",
          "     $First = $true",
          "     foreach ($Config in $Configs) {",
          "         if ($First) {",
          "             $Action = 'fetch-config'",
          "             Write-Output \"Fetching base config: $Config\"",
          "             $First = $false",
          "         } else {",
          "             $Action = 'append-config'",
          "             Write-Output \"Appending config: $Config\"",
          "         }",
          "         & \"$Cmd\" -a $Action -m '{{mode}}' -c \"ssm:$Config\"",
          "     }",
          "     if ('{{optionalRestart}}' -eq 'yes') {",
          "         Write-Output \"Restarting CloudWatch Agent...\"",
          "         & \"$Cmd\" -a stop",
          "         & \"$Cmd\" -a start",
          "     }",
          "     Write-Output \"Successfully merged all configurations\"",
          "     exit 0",
          " }",
          " # Map action names to agent commands",
          " if ($Action -eq 'configure') {",
          "     $Action = 'fetch-config'",
          " } elseif ($Action -eq 'configure (append)') {",
          "     $Action = 'append-config'",
          " } elseif ($Action -eq 'configure (remove)') {",
          "     $Action = 'remove-config'",
          " }",
          " if ($Action -eq 'fetch-config' -Or $Action -eq 'append-config' -Or $Action -eq 'remove-config') {",
          "     $CWAConfig = '{{optionalConfigurationLocation}}'",
          "     if ('{{optionalConfigurationSource}}' -eq 'ssm') {",
          "         if ($CWAConfig) {",
          "             $CWAConfig = \"ssm:${CWAConfig}\"",
          "         }",
          "     } else {",
          "         $CWAConfig = '{{optionalConfigurationSource}}'",
          "     }",
          "     if (!$CWAConfig) {",
          "         Write-Output 'AmazonCloudWatchAgent config should be specified'",
          "         exit 1",
          "     }",
          "     if ($CWAConfig -eq 'all' -And $Action -ne 'remove-config') {",
          "         Write-Output 'Configuration location \"all\" can only be applied with action \"remove-config\"'",
          "         exit 1",
          "     }",
          "     $Params += ('-c', \"${CWAConfig}\")",
          "     if ('{{optionalRestart}}' -eq 'yes') {",
          "         $Params += '-s'",
          "     }",
          " }",
          " $Params += ('-a', \"${Action}\", '-m', '{{mode}}')",
          " if ($Action -eq 'status-with-workloads') {",
          "     $Output = Invoke-Expression \"& '${Cmd}' ${Params}\"",
          "     if ($LASTEXITCODE -ne 0) {",
          "         $global:LASTEXITCODE = 0",
          "         $Params = $Params -replace 'status-with-workloads', 'status'",
          "         Invoke-Expression \"& '${Cmd}' ${Params}\"",
          "     } else {",
          "         Write-Output $Output",
          "     }",
          " } else {",
          "     Invoke-Expression \"& '${Cmd}' ${Params}\"",
          " }",
          " Set-StrictMode -Off",
          " exit $LASTEXITCODE"
        ]
      }
    },
    {
      "name": "ControlCloudWatchAgentLinux",
      "action": "aws:runShellScript",
      "precondition": {
        "StringEquals": [
          "platformType",
          "Linux"
        ]
      },
      "inputs": {
        "runCommand": [
          " #!/bin/sh",
          " set -e",
          " set -u",
          " cmd='/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl'",
          " if [ ! -x \"${cmd}\" ]; then",
          "     echo 'CloudWatch Agent not installed.  Please install it using the AWS-ConfigureAWSPackage SSM Document.'",
          " exit 1",
          " fi",
          " action=\"{{action}}\"",
          " # Handle multi-config merge for configure action",
          " configlocation=\"{{optionalConfigurationLocation}}\"",
          " if [ \"${action}\" = \"configure\" ] && [ \"{{optionalConfigurationSource}}\" = \"ssm\" ] && echo \"${configlocation}\" | grep -q \",\"; then",
          "     echo \"Merging multiple configurations: ${configlocation}\"",
          "     first=true",
          "     for config in $(echo \"${configlocation}\" | tr \",\" \" \"); do",
          "         if [ \"${first}\" = \"true\" ]; then",
          "             action=\"fetch-config\"",
          "             echo \"Fetching base config: ${config}\"",
          "             first=false",
          "         else",
          "             action=\"append-config\"",
          "             echo \"Appending config: ${config}\"",
          "         fi",
          "         ${cmd} -a ${action} -m {{mode}} -c ssm:${config}",
          "     done",
          "     if [ \"{{optionalRestart}}\" = \"yes\" ]; then",
          "         echo \"Restarting CloudWatch Agent...\"",
          "         ${cmd} -a stop -m {{mode}}",
          "         ${cmd} -a start -m {{mode}}",
          "     fi",
          "     echo \"Successfully merged all configurations\"",
          "     exit 0",
          " fi",
          " # Map action names to agent commands",
          " if [ \"${action}\" = 'configure' ]; then",
          "     action='fetch-config'",
          " elif [ \"${action}\" = 'configure (append)' ]; then",
          "     action='append-config'",
          " elif [ \"${action}\" = 'configure (remove)' ]; then",
          "     action='remove-config'",
          " fi",
          " if [ \"${action}\" = 'fetch-config' ] || [ \"${action}\" = 'append-config' ] || [ \"${action}\" = 'remove-config' ]; then",
          "     cwaconfig='{{optionalConfigurationLocation}}'",
          "     if [ '{{optionalConfigurationSource}}' = 'ssm' ]; then",
          "         if [ -n \"${cwaconfig}\" ]; then",
          "             cwaconfig=\"ssm:${cwaconfig}\"",
          "         fi",
          "     else",
          "         cwaconfig='{{optionalConfigurationSource}}'",
          "     fi",
          "     if [ -z \"${cwaconfig}\" ]; then",
          "         echo 'AmazonCloudWatchAgent config should be specified'",
          "         exit 1",
          "     fi",
          "     cmd=\"${cmd} -c ${cwaconfig}\"",
          "     if [ \"${cwaconfig}\" = 'all' ] && [ \"${action}\" != 'remove-config' ]; then",
          "         echo 'Configuration location \"all\" can only be applied with action \"remove-config\"'",
          "         exit 1",
          "     fi",
          "     if [ '{{optionalRestart}}' = 'yes' ]; then",
          "         cmd=\"${cmd} -s\"",
          "     fi",
          " fi",
          " cmd=\"${cmd} -a ${action} -m {{mode}}\"",
          " if [ \"${action}\" = 'status-with-workloads' ]; then",
          "     if ! output=$(${cmd} 2>&1); then",
          "         cmd=$(echo \"${cmd}\" | sed 's/status-with-workloads/status/')",
          "         ${cmd}",
          "     else",
          "         echo \"${output}\"",
          "     fi",
          " else",
          "     ${cmd}",
          " fi"
        ]
      }
    },
    {
      "name": "ControlCloudWatchAgentMacOS",
      "action": "aws:runShellScript",
      "precondition": {
        "StringEquals": [
          "platformType",
          "MacOS"
        ]
      },
      "inputs": {
        "runCommand": [
          " #!/bin/sh",
          " set -e",
          " set -u",
          " cmd='/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl'",
          " if [ ! -x \"${cmd}\" ]; then",
          "     echo 'CloudWatch Agent not installed.  Please install it using the AWS-ConfigureAWSPackage SSM Document.'",
          " exit 1",
          " fi",
          " action=\"{{action}}\"",
          " # Handle multi-config merge for configure action",
          " configlocation=\"{{optionalConfigurationLocation}}\"",
          " if [ \"${action}\" = \"configure\" ] && [ \"{{optionalConfigurationSource}}\" = \"ssm\" ] && echo \"${configlocation}\" | grep -q \",\"; then",
          "     echo \"Merging multiple configurations: ${configlocation}\"",
          "     first=true",
          "     for config in $(echo \"${configlocation}\" | tr \",\" \" \"); do",
          "         if [ \"${first}\" = \"true\" ]; then",
          "             action=\"fetch-config\"",
          "             echo \"Fetching base config: ${config}\"",
          "             first=false",
          "         else",
          "             action=\"append-config\"",
          "             echo \"Appending config: ${config}\"",
          "         fi",
          "         ${cmd} -a ${action} -m {{mode}} -c ssm:${config}",
          "     done",
          "     if [ \"{{optionalRestart}}\" = \"yes\" ]; then",
          "         echo \"Restarting CloudWatch Agent...\"",
          "         ${cmd} -a stop -m {{mode}}",
          "         ${cmd} -a start -m {{mode}}",
          "     fi",
          "     echo \"Successfully merged all configurations\"",
          "     exit 0",
          " fi",
          " # Map action names to agent commands",
          " if [ \"${action}\" = 'configure' ]; then",
          "     action='fetch-config'",
          " elif [ \"${action}\" = 'configure (append)' ]; then",
          "     action='append-config'",
          " elif [ \"${action}\" = 'configure (remove)' ]; then",
          "     action='remove-config'",
          " fi",
          " if [ \"${action}\" = 'fetch-config' ] || [ \"${action}\" = 'append-config' ] || [ \"${action}\" = 'remove-config' ]; then",
          "     cwaconfig='{{optionalConfigurationLocation}}'",
          "     if [ '{{optionalConfigurationSource}}' = 'ssm' ]; then",
          "         if [ -n \"${cwaconfig}\" ]; then",
          "             cwaconfig=\"ssm:${cwaconfig}\"",
          "         fi",
          "     else",
          "         cwaconfig='{{optionalConfigurationSource}}'",
          "     fi",
          "     if [ -n \"${cwaconfig}\" ]; then",
          "         cmd=\"${cmd} -c ${cwaconfig}\"",
          "     fi",
          "     if [ \"${cwaconfig}\" = 'all' ] && [ \"${action}\" != 'remove-config' ]; then",
          "         echo 'Configuration location \"all\" can only be applied with action \"remove-config\"'",
          "         exit 1",
          "     fi",
          "     if [ -z \"${cwaconfig}\" ]; then",
          "         echo 'AmazonCloudWatchAgent config should be specified'",
          "         exit 1",
          "     fi",
          "     if [ '{{optionalRestart}}' = 'yes' ]; then",
          "         cmd=\"${cmd} -s\"",
          "     fi",
          " fi",
          " cmd=\"${cmd} -a ${action} -m {{mode}}\"",
          " if [ \"${action}\" = 'status-with-workloads' ]; then",
          "     if ! output=$(${cmd} 2>&1); then",
          "         cmd=$(echo \"${cmd}\" | sed 's/status-with-workloads/status/')",
          "         ${cmd}",
          "     else",
          "         echo \"${output}\"",
          "     fi",
          " else",
          "     ${cmd}",
          " fi"
        ]
      }
    }
  ]
}