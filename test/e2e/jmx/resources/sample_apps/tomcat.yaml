apiVersion: v1
kind: Namespace
metadata:
  name: test
---
apiVersion: v1
kind: Service
metadata:
  name: tomcat-service
  namespace: test
spec:
  type: ClusterIP
  selector:
    app: tomcat
  ports:
    - port: 80
      targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tomcat
  namespace: test
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tomcat
  template:
    metadata:
      labels:
        app: tomcat
      annotations:
        instrumentation.opentelemetry.io/inject-java: "true"
        cloudwatch.aws.amazon.com/inject-jmx-jvm: "true"
        cloudwatch.aws.amazon.com/inject-jmx-tomcat: "true"
    spec:
      containers:
        - name: tomcat-container
          image: public.ecr.aws/l9b8e0i6/tomcat:latest
          ports:
            - containerPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: load-generator
  namespace: test
spec:
  replicas: 1
  selector:
    matchLabels:
      app: load-generator
  template:
    metadata:
      labels:
        app: load-generator
    spec:
      containers:
        - name: load-generator
          image: grafana/k6
          command:
            ["k6", "run", "--duration", "5m", "--vus", "50", "/scripts/test.js"]
          volumeMounts:
            - name: k6-scripts
              mountPath: /scripts
      volumes:
        - name: k6-scripts
          configMap:
            name: k6-test-scripts

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: k6-test-scripts
  namespace: test
data:
  test.js: |
    import http from 'k6/http';
    import { check, sleep } from 'k6';

    export const options = {
        stages: [
            { duration: '10m', target: 1 } // 1 user for 10 mins
        ],
    };

    export default function () {
        const res = http.get('http://tomcat-service:80/webapp/index.jsp');
        
        check(res, {
            'status is 200': (r) => r.status === 200,
            'response time < 500ms': (r) => r.timings.duration < 500,
        });
        
        sleep(1); // Pause between iterations
    }
